#! /usr/bin/perl

use lib qw( /usr/local/simsa/lib );
use Mojolicious::Lite;
use Try::Tiny;
use Simsa;
use Simsa::RequestManager;
use Simsa::Client::Registry;
use JSON::XS;
use Clone qw( clone );

our $json     = new JSON::XS();
our $registry = new Simsa::Client::Registry();
our $manager  = new Simsa::RequestManager();

get '/shinsa/json/api/v1/:uuid' => sub {
	my $self   = shift;
	my $uuid   = $self->param( 'uuid' );
	my $object = Simsa::DBO->read( $uuid );

	if( ! $object ) {
		$self->render( json => { code => 404, status => 'error', error => 'Not Found', message => "No $object object with UUID $uuid" });
		return;
	}
	
	$self->render( json => { code => 200, status => 'ok', payload => $object->document()});
};

websocket '/shinsa/ws/api/v1/:exam/:user' => sub {
	my $self   = shift;
	my $client = $registry->add( $self );
	my $request = { subject => 'user', action => 'connect', user => { sessid => $client->sessid(), uuid => $client->uuid(), role => $client->role() }};
	$manager->handle( $client, $request, $registry );

	$self->inactivity_timeout( 3600 ); # 1 hour
	$client->ping->start();

	# ----------------------------------------
	$self->on( message => sub {
	# ----------------------------------------
		try { 
			if( $client->pong->request( $request )) {
				$client->pong->resolve( $request );

			} else {
				$manager->handle( $client, $request, $registry ); 
			}
		} catch { 
			$client->send({ json => { error => "Error while processing request: $_\n", request => $request }}); 
		}
	});

	# ----------------------------------------
	$self->on( finish => sub {
	# ----------------------------------------
		my $request = { subject => 'user', action => 'disconnect', user => { sessid => $client->sessid(), uuid => $client->uuid(), role => $client->role() }};
		$registry->remove( $client );
		$manager->handle( $client, $request, $registry );
		$client->ping->quit();
	});
};

app->start( listen => 3321 );
